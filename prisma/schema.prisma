// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// OLD SCHEMAS

model Admin {
  id       Int      @id @default(autoincrement())
  name     String
  contact  String
  email    String   @unique
  password String
}

model Approver {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  password String
}

model Pengawas {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  password String
}

model User {
  id       Int      @id @default(autoincrement())
  name     String
  contact  String
  email    String   @unique
  status   String
  makams   makam[]
  statuses makamStatus[]
}


model makam {
  id                      Int      @id @default(autoincrement())
  blok                    String
  nama                    String
  lokasi                  String
  silsilah                String
  ext                     String?
  masa_aktif              DateTime
  nama_penanggung_jawab   String
  kontak_penanggung_jawab String
  description             String
  payment                 String
  approved                String
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  userId Int?
  user   User? @relation(fields: [userId], references: [id])
}

model makamStatus {
  id                      Int      @id @default(autoincrement())
  blok                    String
  nama                    String
  lokasi                  String
  silsilah                String
  ext                     String?
  masa_aktif              DateTime
  nama_penanggung_jawab   String
  kontak_penanggung_jawab String
  description             String
  payment                 String
  approved                String
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  userId Int?
  user   User? @relation(fields: [userId], references: [id])
}


// NEW SCHEMAS

model Orang {
  id_orang                      String    @id @default(uuid())  
  nama                          String    @db.VarChar(255)     
  no_kontak                     String?   @db.VarChar(255)
  no_ktp                        String?   @unique @db.Char(16)  
  alamat                        String?   @db.VarChar(255)     
  email                         String?   @unique @db.VarChar(255)
  nama_orang_darurat            String?   @db.VarChar(255)     
  no_kontak_darurat             String?   @unique @db.VarChar(255)

  jenazah           Jenazah?
  penanggung_jawab  Penanggung_Jawab?
}

model Jenazah {
  id_jenazah                    String    @id @default(uuid())
  id_orang                      String?   @unique
  tanggal_pemakaman             DateTime?
  status_jenazah                String?   @db.VarChar(255)
  masa_aktif                    Int?      @db.Integer
  id_blok                       String?   @unique
  status_pembayaran             String?   @db.VarChar(255)

  orang    Orang?               @relation(fields: [id_orang], references: [id_orang])
  blok     Blok?                @relation(fields: [id_blok], references: [id_blok])
}

model Blok {
  id_blok                        String    @id @default(uuid())
  lokasi                         String?   @db.VarChar(255)
  tanggal_pemakaman_terakhir     DateTime?
  status_blok                    String?   @db.VarChar(255)
  availability                   String?   @db.VarChar(255)  

  jenazah  Jenazah?
}

model Penanggung_Jawab {
  id_penanggung_jawab           String    @id @default(uuid())
  id_orang                      String   @unique

  orang    Orang                @relation(fields: [id_orang], references: [id_orang])
}